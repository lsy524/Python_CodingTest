# 병사 배치하기 

'''
* 문제 해결 아이디어 
    - 가장 긴 증가하는 부분 수열(LIS)로 알려진 전형적인 다이나믹 프로그래밍 문제
    - ex). arr = {4, 2, 5, 8, 4, 11, 15}
        - 이 수열 중 가장 긴 증가하는 부분 수열은 {4, 5, 8, 11 ,15}
    - 본 문제는 가장 긴 감소하는 부분 수열을 찾는 문제로 치환활 수 있으므로, LIS 알고리즘을 조금 수정하여 적용하면 됨

    - 가장 긴 증가하는 부분 수열(LIS) 알고리즘
        - D[i] = arr[i]를 마지막 원소로 가지는 부분 수열의 최대 길이 
        - 점화식
            - i = 현재값, j = 현재값 - 1 번째 값  
            - 모든 O <= j < i에 대하여, D[i] = max(D[i], D[j] + 1) if arr[j] < arr[i]

    - 가장 먼저 입력 받은 병사 정보의 순서를 뒤집고 가장 긴 증가하는 부분 수열(LIS) 알고리즘을 수행하면됨
'''

n = int(input())

arr = list(map(int, input().split()))

arr.reverse() # 순서를 뒤집어 '최장 증가 부분 수열' 문제로 변환 

dp = [1] * 100 # 다이나믹 프로그래밍을 위한 1차원 DP 테이블 초기화 

# 가장 긴 증가하는 부분 수열(LIS) 알고리즘 수행
for i in range(1, n):
    for j in range(0, i) :
        if arr[j] < arr[i]:
            dp[i] = max(dp[i], dp[j] + 1)

print(n - max(dp)) # 열외해야 하는 병사의 최소 수를 출력